//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""1fc2b1ef-bda4-4221-a073-3d95d3693b0a"",
            ""actions"": [
                {
                    ""name"": ""Strafe"",
                    ""type"": ""Button"",
                    ""id"": ""90839a53-cabe-4383-bd69-f3fc60b69d60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""0263f836-857c-4079-b3f4-5f7a41be0cd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""dff503f5-009f-4f92-92e8-371e027ab41a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""be894a6a-e8ff-479a-81d5-cfe5e2a04f4f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5312b220-ca50-4838-b94b-64c686144b63"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""559286e9-53cf-4b51-803f-419d3e334686"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9c5215f1-d1ca-456e-a35f-c643115e9f42"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d7cd334e-0866-494c-a663-e16f69b521e7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""HandActions"",
            ""id"": ""fbbb1098-19f2-4041-aa18-66f732ee555e"",
            ""actions"": [
                {
                    ""name"": ""UseLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""8b6dfe60-9647-4931-8a9d-c4c54c586241"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""eff33bf0-b3f0-41c5-a693-9abde38543d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeftHand"",
                    ""type"": ""Button"",
                    ""id"": ""296c2bb1-8539-4cc2-8fc4-0643cb47eb86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRightHand"",
                    ""type"": ""Button"",
                    ""id"": ""0711d863-5428-44fa-a5bd-4cc4cfe97eb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d16efa35-9253-40f4-adcb-3934a8fe4a40"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73d724a9-ebaf-4371-aab9-71a3a9433950"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44da033b-dcf6-41ff-9192-e376a69b58d9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a21d82a4-8ebb-4419-9b84-d84c927a51c5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Strafe = m_Movement.FindAction("Strafe", throwIfNotFound: true);
        m_Movement_Forward = m_Movement.FindAction("Forward", throwIfNotFound: true);
        // HandActions
        m_HandActions = asset.FindActionMap("HandActions", throwIfNotFound: true);
        m_HandActions_UseLeftHand = m_HandActions.FindAction("UseLeftHand", throwIfNotFound: true);
        m_HandActions_UseRightHand = m_HandActions.FindAction("UseRightHand", throwIfNotFound: true);
        m_HandActions_SwitchLeftHand = m_HandActions.FindAction("SwitchLeftHand", throwIfNotFound: true);
        m_HandActions_SwitchRightHand = m_HandActions.FindAction("SwitchRightHand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Strafe;
    private readonly InputAction m_Movement_Forward;
    public struct MovementActions
    {
        private @PlayerActions m_Wrapper;
        public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Strafe => m_Wrapper.m_Movement_Strafe;
        public InputAction @Forward => m_Wrapper.m_Movement_Forward;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Strafe.started += instance.OnStrafe;
            @Strafe.performed += instance.OnStrafe;
            @Strafe.canceled += instance.OnStrafe;
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Strafe.started -= instance.OnStrafe;
            @Strafe.performed -= instance.OnStrafe;
            @Strafe.canceled -= instance.OnStrafe;
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // HandActions
    private readonly InputActionMap m_HandActions;
    private List<IHandActionsActions> m_HandActionsActionsCallbackInterfaces = new List<IHandActionsActions>();
    private readonly InputAction m_HandActions_UseLeftHand;
    private readonly InputAction m_HandActions_UseRightHand;
    private readonly InputAction m_HandActions_SwitchLeftHand;
    private readonly InputAction m_HandActions_SwitchRightHand;
    public struct HandActionsActions
    {
        private @PlayerActions m_Wrapper;
        public HandActionsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseLeftHand => m_Wrapper.m_HandActions_UseLeftHand;
        public InputAction @UseRightHand => m_Wrapper.m_HandActions_UseRightHand;
        public InputAction @SwitchLeftHand => m_Wrapper.m_HandActions_SwitchLeftHand;
        public InputAction @SwitchRightHand => m_Wrapper.m_HandActions_SwitchRightHand;
        public InputActionMap Get() { return m_Wrapper.m_HandActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandActionsActions set) { return set.Get(); }
        public void AddCallbacks(IHandActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_HandActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandActionsActionsCallbackInterfaces.Add(instance);
            @UseLeftHand.started += instance.OnUseLeftHand;
            @UseLeftHand.performed += instance.OnUseLeftHand;
            @UseLeftHand.canceled += instance.OnUseLeftHand;
            @UseRightHand.started += instance.OnUseRightHand;
            @UseRightHand.performed += instance.OnUseRightHand;
            @UseRightHand.canceled += instance.OnUseRightHand;
            @SwitchLeftHand.started += instance.OnSwitchLeftHand;
            @SwitchLeftHand.performed += instance.OnSwitchLeftHand;
            @SwitchLeftHand.canceled += instance.OnSwitchLeftHand;
            @SwitchRightHand.started += instance.OnSwitchRightHand;
            @SwitchRightHand.performed += instance.OnSwitchRightHand;
            @SwitchRightHand.canceled += instance.OnSwitchRightHand;
        }

        private void UnregisterCallbacks(IHandActionsActions instance)
        {
            @UseLeftHand.started -= instance.OnUseLeftHand;
            @UseLeftHand.performed -= instance.OnUseLeftHand;
            @UseLeftHand.canceled -= instance.OnUseLeftHand;
            @UseRightHand.started -= instance.OnUseRightHand;
            @UseRightHand.performed -= instance.OnUseRightHand;
            @UseRightHand.canceled -= instance.OnUseRightHand;
            @SwitchLeftHand.started -= instance.OnSwitchLeftHand;
            @SwitchLeftHand.performed -= instance.OnSwitchLeftHand;
            @SwitchLeftHand.canceled -= instance.OnSwitchLeftHand;
            @SwitchRightHand.started -= instance.OnSwitchRightHand;
            @SwitchRightHand.performed -= instance.OnSwitchRightHand;
            @SwitchRightHand.canceled -= instance.OnSwitchRightHand;
        }

        public void RemoveCallbacks(IHandActionsActions instance)
        {
            if (m_Wrapper.m_HandActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_HandActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandActionsActions @HandActions => new HandActionsActions(this);
    public interface IMovementActions
    {
        void OnStrafe(InputAction.CallbackContext context);
        void OnForward(InputAction.CallbackContext context);
    }
    public interface IHandActionsActions
    {
        void OnUseLeftHand(InputAction.CallbackContext context);
        void OnUseRightHand(InputAction.CallbackContext context);
        void OnSwitchLeftHand(InputAction.CallbackContext context);
        void OnSwitchRightHand(InputAction.CallbackContext context);
    }
}
